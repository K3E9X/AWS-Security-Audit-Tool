"""
Export de rapports d'audit
Génération de rapports Markdown et PDF
"""

from datetime import datetime
from typing import List
from io import BytesIO


def export_to_markdown(session, client_name: str, auditor_name: str, report_date, include_compliant: bool = False, include_na: bool = False) -> str:
    """Générer un rapport Markdown"""

    from data.aws_services_questions import ALL_QUESTIONS

    # Header
    content = f"""# AWS Security Audit Report

**Client:** {client_name}
**Auditor:** {auditor_name}
**Date:** {report_date}
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

## Executive Summary

"""

    # Statistics
    stats = session.get_statistics()

    content += f"""### Audit Progress

- Total Questions: {stats['total']}
- Answered: {stats['answered']} ({stats['progress']}%)
- Compliant: {stats['compliant']}
- Non-Compliant: {stats['non_compliant']}
- N/A: {stats['na']}
- To Review: {stats['to_review']}

### Risk Distribution

"""

    for risk, count in stats['by_risk'].items():
        if count > 0:
            content += f"- **{risk}:** {count} findings\n"

    content += "\n---\n\n"

    # Critical Findings
    content += "## Critical Findings\n\n"
    critical = session.get_findings_by_risk("Critical")

    if critical:
        for qid, answer in critical.items():
            question = next((q for q in ALL_QUESTIONS if q.id == qid), None)
            if question:
                content += f"""### {question.id}: {question.question}

**Severity:** {question.severity}
**Category:** {question.category}
**Status:** {answer['status']}
**Risk Level:** {answer['risk_level']}

**Finding:**
{answer['notes']}

**Remediation:**
"""
                for step in question.remediation:
                    content += f"- {step}\n"

                content += "\n---\n\n"
    else:
        content += "No critical findings identified.\n\n---\n\n"

    # High Findings
    content += "## High Risk Findings\n\n"
    high = session.get_findings_by_risk("High")

    if high:
        for qid, answer in high.items():
            question = next((q for q in ALL_QUESTIONS if q.id == qid), None)
            if question:
                content += f"""### {question.id}: {question.question}

**Status:** {answer['status']}
**Risk Level:** {answer['risk_level']}
**Notes:** {answer['notes']}

---

"""
    else:
        content += "No high risk findings identified.\n\n"

    # Detailed Findings by Service
    content += "## Detailed Findings by Service\n\n"

    services = set([q.category for q in ALL_QUESTIONS])

    for service in sorted(services):
        service_questions = [q for q in ALL_QUESTIONS if q.category == service]

        content += f"### {service}\n\n"

        for question in service_questions:
            answer = session.get_answer(question.id)

            if not answer:
                continue

            status = answer.get('status', '')

            # Skip based on filters
            if not include_compliant and status == "Compliant":
                continue
            if not include_na and status == "N/A":
                continue

            content += f"""#### {question.id}: {question.question}

**Status:** {status}
**Risk:** {answer.get('risk_level', 'N/A')}
**Notes:** {answer.get('notes', 'No notes')}

"""

    # Appendix
    content += """---

## Appendix

### Compliance Frameworks Referenced

- ISO 27001: Information Security Management
- SOC2: Service Organization Control 2
- PCI-DSS: Payment Card Industry Data Security Standard
- HIPAA: Health Insurance Portability and Accountability Act
- CIS Benchmark: Center for Internet Security AWS Foundations Benchmark
- NIST: National Institute of Standards and Technology

### References

- AWS Security Best Practices: https://aws.amazon.com/security/best-practices/
- CIS AWS Foundations Benchmark: https://www.cisecurity.org/benchmark/amazon_web_services
- AWS Well-Architected Framework: https://aws.amazon.com/architecture/well-architected/

---

*Report generated by AWS Security Audit Tool*
"""

    return content


def export_to_pdf(session, client_name: str, auditor_name: str, report_date, include_compliant: bool = False, include_na: bool = False) -> bytes:
    """Générer un rapport PDF"""

    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
    from reportlab.lib import colors

    buffer = BytesIO()

    # Create PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    styles = getSampleStyleSheet()

    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#232F3E'),
        spaceAfter=30
    )

    story.append(Paragraph("AWS Security Audit Report", title_style))
    story.append(Spacer(1, 0.2*inch))

    # Metadata
    metadata = f"""
    <b>Client:</b> {client_name}<br/>
    <b>Auditor:</b> {auditor_name}<br/>
    <b>Date:</b> {report_date}<br/>
    <b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """
    story.append(Paragraph(metadata, styles['Normal']))
    story.append(Spacer(1, 0.5*inch))

    # Statistics
    stats = session.get_statistics()

    story.append(Paragraph("Executive Summary", styles['Heading2']))

    stats_data = [
        ['Metric', 'Value'],
        ['Total Questions', str(stats['total'])],
        ['Answered', f"{stats['answered']} ({stats['progress']}%)"],
        ['Compliant', str(stats['compliant'])],
        ['Non-Compliant', str(stats['non_compliant'])],
        ['N/A', str(stats['na'])],
        ['To Review', str(stats['to_review'])]
    ]

    stats_table = Table(stats_data)
    stats_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#232F3E')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))

    story.append(stats_table)
    story.append(Spacer(1, 0.3*inch))

    # Risk Distribution
    story.append(Paragraph("Risk Distribution", styles['Heading3']))

    risk_data = [['Risk Level', 'Count']]
    for risk, count in stats['by_risk'].items():
        if count > 0:
            risk_data.append([risk, str(count)])

    if len(risk_data) > 1:
        risk_table = Table(risk_data)
        risk_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#667eea')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(risk_table)

    story.append(PageBreak())

    # Findings
    story.append(Paragraph("Findings", styles['Heading2']))

    from data.aws_services_questions import ALL_QUESTIONS

    critical = session.get_findings_by_risk("Critical")

    if critical:
        story.append(Paragraph("Critical Findings", styles['Heading3']))

        for qid, answer in critical.items():
            question = next((q for q in ALL_QUESTIONS if q.id == qid), None)
            if question:
                story.append(Paragraph(f"<b>{question.id}:</b> {question.question}", styles['Heading4']))
                story.append(Paragraph(f"<b>Finding:</b> {answer['notes']}", styles['Normal']))
                story.append(Spacer(1, 0.2*inch))

    # Build PDF
    doc.build(story)

    pdf_bytes = buffer.getvalue()
    buffer.close()

    return pdf_bytes
